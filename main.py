from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from states import user_states
from delete_task import delete_task_command, delete_task
from add_task import handle_task_room  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
from show_task import show_task_command, handle_show_tasks#, handle_task_selection
import asyncio, psycopg2
from notifier import start_notifier

DB_CONFIG = {
    "dbname": "",
    "user": "",
    "password": "",
    "host": "",
    "port": 
}
async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ø–æ–ª—É—á–∞–µ–º chat_id"""
    user = update.effective_user
    chat_id = user.id
    user_name = user.first_name

    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    'INSERT INTO users (user_name, chat_id) VALUES (%s, %s)',
                    (user_name, chat_id)
                )
                conn.commit()

        await update.message.reply_text(
            f"–í–∞—à chat_id: {chat_id}\n"
            f"–ò–º—è: {user_name}\n"
            "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id: {e}")
        await update.message.reply_text(f"–í–∞—à chat_id: {chat_id} (–Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)")



def get_main_keyboard():
    """–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤—É"""
    return ReplyKeyboardMarkup(
        [["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è"], ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"], ["–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"]],
    resize_keyboard=True
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è"],
        ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"], 
        ["–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –ü—Ä–æ–ø–∏—à–∏ —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥—É /register. –í —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞–ø–∏—à–∏ /set_username –ò–º—è (–≤–º–µ—Å—Ç–æ '–ò–º—è' –Ω–∞–ø–∏—à–∏ '–ú–∏—à–∞', '–ü–∞–ø–∞', '–ú–∞–º–∞', '–ù–∞—Å—Ç—è'). –ü–æ—Å–ª–µ —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.",
        reply_markup=get_main_keyboard()
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    user_id = update.effective_user.id

    if user_input == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ":
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if user_id in user_states:
            del user_states[user_id]
        context.user_data.clear()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        user_states[user_id] = "ADD_TASK_TITLE"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
        
    elif user_input == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è":
        await show_task_command(update, context)
        
    elif user_input == "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ":
        await delete_task_command(update, context)
        
    else:
        await handle_unknwon_command(update, context)

async def handle_unknwon_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    user_id = update.effective_user.id

    #–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∞
    if user_id in user_states:
        await route_message(update, context)
    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:",
            reply_markup=get_main_keyboard()
        )
        
async def route_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id in user_states:
        current_state = user_states[user_id]
        
        if current_state.startswith("ADD_TASK_"):
            result = await handle_task_room(update, context)
            if result == "COMPLETE":
                await show_main_menu(update)
            
        elif current_state.startswith("SHOW_TASK_"):
            result = await handle_show_tasks(update, context)
            if result == "COMPLETE":
                await show_main_menu(update)
            
        elif current_state.startswith("DELETE_TASK_"): 
            result = await delete_task(update, context)
            if result == "COMPLETE":
                await show_main_menu(update)
            
async def show_main_menu(update: Update):
    """–≤—ã–¥–∞–µ—Ç –≥–ª–∞–≤ –º–µ–Ω—é —Å –∫–ª–∞–≤–æ–π"""
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """—Ä–µ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ id"""
    user = update.effective_user
    chat_id = update.effective_chat.id

    user_name = user.first_name or "User"
    if user.last_name:
        user_name += " " + user.last_name

    print(f"üîÑ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º: {user_name} (chat_id: {chat_id})")

    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    'INSERT INTO users (user_name, chat_id) VALUES (%s, %s)',
                    (user_name, chat_id)
                )
                conn.commit()
        
        await update.message.reply_text(
            f"‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {user_name}!",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")  # –¢–µ–ø–µ—Ä—å –≤—ã–≤–µ–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def set_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    args = context.args # /set_username –ú–∏—à–∞

    if not args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: /set_username –ú–∏—à–∞")
        return
    
    assignee_name = args[0] #–ú–∏—à–∞
    username = user.username #mishapss –∏–ª–∏ none

    if not username:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —é–∑–µ—Ä–Ω–µ–π–º –≤ Telegram. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
        return
    
    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                # –æ–±–Ω–æ–≤–ª—è–µ–º assignee_mapping
                cursor.execute(
                    'INSERT INTO assignee_mapping (name, username) '
                    'VALUES (%s, %s) '
                    'ON CONFLICT (name) DO UPDATE SET username = EXCLUDED.username',
                    (assignee_name, user.username)
                )
                # 2. –û–±–Ω–æ–≤–ª—è–µ–º users (—á—Ç–æ–±—ã username –±—ã–ª —Ç–∞–º –∂–µ)
                cursor.execute(
                    'UPDATE users SET username = %s WHERE chat_id = %s',
                    (username, chat_id)
                )
                conn.commit

        await update.message.reply_text(
            f"‚úÖ –í—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∏–º–µ–Ω–∏ '{assignee_name}'!\n"
            f"–í–∞—à —é–∑–µ—Ä–Ω–µ–π–º: @{username}"
        )
    except Exception as e:
        print(f"–æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    TOKEN = ""
    application = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CommandHandler("register", register))
    application.add_handler(CommandHandler("myid", get_id))
    application.add_handler(CommandHandler("set_username", set_username))
    
    # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    loop = asyncio.get_event_loop()
    loop.create_task(start_notifier(TOKEN))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()