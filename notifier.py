from telegram import Bot
import psycopg2, asyncio
from datetime import datetime, timedelta
from typing import Union
from datetime import datetime, date

DB_CONFIG = {
    "dbname": "",
    "user": "",
    "password": "",
    "host": "",
    "port": 
}


async def notify_assignee(bot_token: str, assignee_name: str, 
                        task_title: str, task_description: str,
                        due_date: Union[datetime, date, None] = None, has_time: bool = False):
    bot = Bot(token=bot_token)

    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    'SELECT username FROM assignee_mapping WHERE name = %s',
                    (assignee_name,)
                )
                result = cursor.fetchone()
                
                if not result:
                    print(f"‚ö†Ô∏è –î–ª—è '{assignee_name}' –Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞!")
                    return
                          
                username = result[0]  # "mishapss"
                
                # 2. –ò—â–µ–º chat_id –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É (–∏–∑ users)
                cursor.execute(
                    'SELECT chat_id FROM users WHERE username = %s',
                    (username,)
                )
                result = cursor.fetchone()
                
                if not result:
                    print(f"‚ö†Ô∏è –ù–µ—Ç chat_id –¥–ª—è @{username}!")
                    return
                
                chat_id = result[0]

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É (–µ—Å–ª–∏ due_date –Ω–µ None)
                deadline_text = "–Ω–µ —É–∫–∞–∑–∞–Ω"
                if due_date:
                    if has_time and isinstance(due_date, datetime):
                        deadline_text = due_date.strftime("%d.%m.%Y %H:%M")
                    else:
                        deadline_text = due_date.strftime("%d.%m.%Y")
    
                message = (
                    "üìå –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!\n\n"
                    f"üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: {task_title}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {task_description}\n"
                    f"‚è≥ –î–µ–¥–ª–∞–π–Ω: {deadline_text}\n"
                )

                await bot.send_message(chat_id=chat_id, text=message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


async def start_notifier(bot_token: str):
    """—Ñ–æ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤"""
    bot = Bot(token = bot_token)
    while True:
        try:
            await check_deadlines(bot)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ notifier: {e}")
        await asyncio.sleep(3600)

async def check_deadlines(bot: Bot):
    """–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤"""
    now = datetime.now()
    deadline_threshold = now + timedelta(hours=24)

    with psycopg2.connect(**DB_CONFIG) as conn:
        with conn.cursor() as cursor:
            cursor.execute('''
                SELECT task_id, task.title, task.assignee, users.chat_id
                FROM tasks task
                JOIN users ON task.assignee = user_name
                WHERE task.due_date BETWEEN %s AND %s
                AND task.notified = FALSE    
                ''', (now, deadline_threshold))
            
            for task_id, title, assignee, chat_id in cursor.fetchall():
                try:
                    message = (
                        "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n"
                        f"–ó–∞–¥–∞–Ω–∏–µ: {title}\n"
                        f"–î–µ–¥–ª–∞–π–Ω: {deadline_threshold.strftime('%d.%m.%Y %H:%M')}\n"
                        "–û—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤!"
                    )
                    await bot.send_message(chat_id=chat_id, text=message)

                    cursor.execute(
                        "UPDATE tasks task SET notified = TRUE WHERE task.id = %s",
                        (task_id,)
                    )
                    conn.commit()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")