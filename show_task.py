import psycopg2
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from states import user_states


#configuration to connect to datebase
DB_CONFIG = {
    "dbname": "db1",
    "user": "postgres",
    "password": "PGS8!32_admin",
    "host": "localhost",
    "port": 5432
}

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è"], ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"], ["–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"]],
        resize_keyboard=True
    )

async def show_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É –ø–æ–∫–∞–∑–∞ –∑–∞–¥–∞–Ω–∏—è. –î–æ–ª–∂–µ–Ω —Ç–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞."""
    user_id = update.effective_user.id
    user_states[user_id] = "SHOW_TASK_ASSIGNEE"

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:",
        reply_markup=ReplyKeyboardMarkup(
            [["–ú–∏—à–∞", "–ü–∞–ø–∞", "–ú–∞–º–∞", "–ù–∞—Å—Ç—è"]],
            one_time_keyboard=True
        )
    )
    
async def handle_show_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
    user_id = update.effective_user.id
    
    if user_states.get(user_id) != "SHOW_TASK_ASSIGNEE":
        return
    
    assignee = update.message.text.strip()
    context.user_data['current_assignee'] = assignee

    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    '''SELECT task_id, title, description, due_date FROM tasks WHERE assignee = %s ORDER BY due_DATE NULLS LAST, created_at''',
                    (assignee,)
                )
                tasks = cursor.fetchall()
        
        if not tasks:
            await update.message.reply_text(f"–£ {assignee} –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π", reply_markup=get_main_keyboard())
            del user_states[user_id]
            return
        
        tasks_list = []
        for task in tasks:
            task_id, title, description, due_date = task

            due_str = "‚è≥ –±–µ–∑ —Å—Ä–æ–∫–∞" if due_date is None else f"–¥–æ {due_date.strftime('%d.%m.%Y')}"

            tasks_list.append(
                f"üîπ {title}\n"
                f"   {description}\n"
                f"   {due_str}\n"
            )

        await update.message.reply_text(
            f"üìã –ó–∞–¥–∞–Ω–∏—è –¥–ª—è {assignee}:\n\n" + 
            "\n".join(tasks_list),
            reply_markup=get_main_keyboard()
        )

        user_states[user_id] = "WAITING_TASK_SELECTION"
        context.user_data["tasks"] = {task[0]: task for task in tasks}

        return "COMPLETE"

    except Exception as e:
        print(f"Database error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π",
        reply_markup=get_main_keyboard()
        )
        if user_id in user_states:
            del user_states[user_id]