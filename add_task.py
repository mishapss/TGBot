import psycopg2
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from states import user_states
from datetime import datetime, timedelta
from notifier import notify_assignee


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    "dbname": "",
    "user": "",
    "password": "",
    "host": "",
    "port": 
}

def create_datemultirange(date):
    upper_bound = date + timedelta(days=1)
    return f"{{[{date.isoformat()}, {upper_bound.isoformat()})}}"

async def add_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è."""
    user_id = update.effective_user.id
    user_states[user_id] = "ADD_TASK_TITLE" # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.clear() #–æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_task_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö."""
    user_id = update.effective_user.id
    user_input = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_states or not user_states[user_id].startswith("ADD_TASK_"):
        return
    
    current_state = user_states[user_id]
        
    if current_state == "ADD_TASK_TITLE":
        context.user_data["title"] = user_input
        user_states[user_id] = "ADD_TASK_DESCRIPTION"
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    
    elif current_state == "ADD_TASK_DESCRIPTION":
        context.user_data['description'] = user_input
        user_states[user_id] = "ADD_TASK_ASSIGNEE"

        reply_keyboard = [["–ú–∏—à–∞", "–ü–∞–ø–∞", "–ú–∞–º–∞", "–ù–∞—Å—Ç—è"]]
        await update.message.reply_text(
            "–≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                one_time_keyboard=True
            )
        )

    elif current_state == "ADD_TASK_ASSIGNEE":
        if user_input not in ["–ú–∏—à–∞", "–ü–∞–ø–∞", "–ú–∞–º–∞", "–ù–∞—Å—Ç—è"]:
            await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞")
            return
        
        context.user_data["assignee"] = user_input
        user_states[user_id] = "ADD_TASK_DUE_DATE"
        await update.message.reply_text(
            "‚è≥ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –Ω–µ –Ω—É–∂–µ–Ω"
        )
    
    elif current_state == "ADD_TASK_DUE_DATE":
        due_date = None
        has_time = False

        
        if user_input.lower() != '–Ω–µ—Ç':
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É (—Å –≤—Ä–µ–º–µ–Ω–µ–º –∏–ª–∏ –±–µ–∑)
                if ' ' in user_input:
                    due_date = datetime.strptime(user_input, "%d.%m.%Y %H:%M")
                    context.user_data["has_time"] = True
                else:
                    due_date = datetime.strptime(user_input, "%d.%m.%Y").date()
                    context.user_data["has_time"] = False
            
            except ValueError:
                await update.message.reply_text(
                    "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ:\n"
                    "‚Ä¢ 25.12.2023 (–¥–∞—Ç–∞)\n"
                    "‚Ä¢ 25.12.2023 14:00 (–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è)\n"
                    "‚Ä¢ '–Ω–µ—Ç' (–±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞)"
                )
                return
        
        context.user_data["due_date"] = due_date
        context.user_data["has_time"] = has_time
             
            #—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–¥
        try:
            with psycopg2.connect(**DB_CONFIG) as conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        '''INSERT INTO tasks 
                        (title, description, assignee, status, due_date, created_at, category, notified)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, FALSE)
                        RETURNING task_id''',
                        (
                        context.user_data["title"],
                        context.user_data["description"],
                        context.user_data["assignee"],
                        "–ù–æ–≤–∞—è",
                        context.user_data["due_date"],
                        create_datemultirange(datetime.now().date()),
                        "–û–±—â–µ–µ"
                        )
                    )
                    task_id = cursor.fetchone()[0]
                    conn.commit()


            due_date_value = context.user_data["due_date"]
            if due_date_value:
                if context.user_data["has_time"]:
                    due_date_str = due_date_value.strftime("%d.%m.%Y %H:%M")
                else:
                    due_date_str = due_date_value.strftime("%d.%m.%Y")
            else:
                due_date_str = "–Ω–µ—Ç"
                
            message = (
                    f"‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                    f"üìå {context.user_data['title']}\n"
                    f"üìù {context.user_data['description']}\n"
                    f"üë§ {context.user_data['assignee']}\n"
                    f"‚è≥ {due_date_str}"
                )
            
            await update.message.reply_text(message, parse_mode='HTML')

        
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await notify_assignee(
                bot_token=context.bot.token,
                assignee_name=context.user_data["assignee"],
                task_title=context.user_data["title"],
                task_description=context.user_data["description"],
                due_date=context.user_data["due_date"],
                has_time=context.user_data["has_time"]
            )

            return "COMPLETE"

        except Exception as e:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è")
            print(f"–æ—à–∏–±–∫–∞ {e}")
        finally:
            #–æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if user_id in user_states:
                del user_states[user_id]
            context.user_data.clear()
        
        
