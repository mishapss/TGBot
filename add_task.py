import psycopg2
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from states import user_states, STATE_WAITING_TITLE, STATE_WAITING_DESCRIPTION, STATES, STATE_WAITING_ASSIGNEE, STATE_WAITING_DUE_DATE
from datetime import datetime, timedelta
from notifier import notify_assignee


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    "dbname": "",
    "user": "",
    "password": "",
    "host": "",
    "port": 
}

def create_datemultirange(date):
    upper_bound = date + timedelta(days=1)
    return f"{{[{date.isoformat()}, {upper_bound.isoformat()})}}"

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è"], ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"], ["–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"]],
        resize_keyboard=True
    )

async def add_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è."""
    user_id = update.effective_user.id
    user_states[user_id] = "ADD_TASK_TITLE"
    context.user_data.clear()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    print(datetime.now())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_task_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_input = update.message.text.strip()

    #print(f"\n=== DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '{user_input}' –æ—Ç {user_id} ===")
    #print(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_states.get(user_id)}")
    #print(f"User_data: {context.user_data}")
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö."""
    
    if user_id not in user_states:
        return
    
    current_state = user_states[user_id]
        
    if current_state == "ADD_TASK_TITLE":
        context.user_data["title"] = user_input
        user_states[user_id] = "ADD_TASK_DESCRIPTION"
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    
    elif current_state == "ADD_TASK_DESCRIPTION":
        context.user_data['description'] = user_input
        user_states[user_id] = "ADD_TASK_ASSIGNEE"

        reply_keyboard = [["–ú–∏—à–∞", "–ü–∞–ø–∞", "–ú–∞–º–∞", "–ù–∞—Å—Ç—è"]]
        await update.message.reply_text(
            "–≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                one_time_keyboard=True
            )
        )

    elif current_state == "ADD_TASK_ASSIGNEE":
        if user_input not in ["–ú–∏—à–∞", "–ü–∞–ø–∞", "–ú–∞–º–∞", "–ù–∞—Å—Ç—è"]:
            await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞")
            return
        
        context.user_data["assignee"] = user_input
        user_states[user_id] = "ADD_TASK_DUE_DATE"
        await update.message.reply_text(
            "‚è≥ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –Ω–µ –Ω—É–∂–µ–Ω"
        )
    
    elif current_state == "ADD_TASK_DUE_DATE":
        due_date = None        

        if user_input.lower() == '–Ω–µ—Ç':
            context.user_data["due_date"] = None
            context.user_data["reminder"] = "–Ω–µ—Ç"
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ADD_TASK_REMINDER_TYPE –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é
            user_states[user_id] = "ADD_TASK_NEXT_STATE_AFTER_TASK_CREATION"
        
            return await handle_task_creation(update, context)
    
        try:
            due_date = datetime.strptime(user_input, "%d.%m.%Y").date()
            context.user_data["due_date"] = due_date

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            user_states[user_id] = "ADD_TASK_REMINDER_TYPE"
            #print(f"DEBUG: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ADD_TASK_REMINDER_TYPE –¥–ª—è {user_id}")
    
            reply_keyboard = [["–ó–∞ 2 –¥–Ω—è –¥–æ", "–ó–∞ 1 –¥–µ–Ω—å –¥–æ", "–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ 9:00 —É—Ç—Ä–∞"]]
    
            await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                one_time_keyboard=True
            )
            )
            return
        except ValueError:
            await update.message.reply_text(
            "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ:\n"
            "‚Ä¢ 25.12.2023 (–¥–∞—Ç–∞)\n"
            "‚Ä¢ '–Ω–µ—Ç' (–±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞)"
            )
        return

    elif current_state == "ADD_TASK_REMINDER_TYPE":
        #print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {user_input}")
        context.user_data["reminder"] = user_input

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á–∏
        user_states[user_id] = "ADD_TASK_NEXT_STATE_AFTER_TASK_CREATION"
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        return await handle_task_creation(update, context)

async def handle_task_creation(update, context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –ë–î"""
    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    '''INSERT INTO tasks 
                    (title, description, assignee, status, due_date, created_at, category, notified, reminder_type)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, FALSE, %s)
                    RETURNING task_id''',
                    (
                    context.user_data["title"],
                    context.user_data["description"],
                    context.user_data["assignee"],
                    "–ù–æ–≤–∞—è",
                    context.user_data["due_date"],
                    create_datemultirange(datetime.now().date()),
                    "–û–±—â–µ–µ",
                    context.user_data.get("reminder")
                    )
                )
                task_id = cursor.fetchone()[0]
                conn.commit()

        due_date_str = "–Ω–µ—Ç"
        if context.user_data["due_date"]:
            due_date_str = context.user_data["due_date"].strftime("%d.%m.%Y")
            
        message = (
                f"‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                f"üìå {context.user_data['title']}\n"
                f"üìù {context.user_data['description']}\n"
                f"üë§ {context.user_data['assignee']}\n"
                f"‚è≥ {due_date_str}\n"
                f"üîî {context.user_data.get('reminder', '–Ω–µ—Ç')}"
            )
        
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=get_main_keyboard())

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await notify_assignee(
            bot_token=context.bot.token,
            assignee_name=context.user_data["assignee"],
            task_title=context.user_data["title"],
            task_description=context.user_data["description"],
            due_date=context.user_data["due_date"],
            reminder=context.user_data.get("reminder")
        )

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_id = update.effective_user.id
        if user_id in user_states:
            del user_states[user_id]
        context.user_data.clear()

    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è",
        reply_markup=get_main_keyboard())
        print(f"–æ—à–∏–±–∫–∞ {e}")
        
