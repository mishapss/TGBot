import psycopg2
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from states import user_states
from notifier import notify_assignee 
import dateparser
from datetime import datetime, timedelta
import re
from dateutil.relativedelta import relativedelta

DB_CONFIG = {
    "dbname": "",
    "user": "",
    "password": "",
    "host": "",
    "port": 
}

def create_datemultirange(date):
    upper_bound = date + timedelta(days=1)
    return f"{{[{date.isoformat()}, {upper_bound.isoformat()})}}"

def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è"], ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"], ["–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"]],
        resize_keyboard=True
    )

async def add_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è."""
    user_id = update.effective_user.id
    user_states[user_id] = "ADD_TASK_TITLE"
    context.user_data.clear()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")


async def parse_date(date_str):
    if not date_str or date_str.lower().strip() == '–Ω–µ—Ç':
        return None
    
    lower_input = date_str.lower().strip()

    if lower_input == "—Å–µ–≥–æ–¥–Ω—è":
        return datetime.now().date()
    if lower_input == "–∑–∞–≤—Ç—Ä–∞":
        return (datetime.now() + timedelta(days=1)).date()
    if lower_input == "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞":
        return (datetime.now() + timedelta(days=2)).date()

    m = re.match(r'^—á–µ—Ä–µ–∑\s+(?:(\d+)\s+)?([–∞-—è—ë]+)', lower_input)
    if m:
        n = int(m.group(1)) if m.group(1) else 1
        unit = m.group(2)

        day_forms   = {"–¥–µ–Ω—å", "–¥–Ω—è", "–¥–Ω–µ–π", "—Å—É—Ç–∫–∏", "—Å—É—Ç–æ–∫"}
        week_forms  = {"–Ω–µ–¥–µ–ª—è", "–Ω–µ–¥–µ–ª—é", "–Ω–µ–¥–µ–ª–∏", "–Ω–µ–¥–µ–ª—å"}
        month_forms = {"–º–µ—Å—è—Ü", "–º–µ—Å—è—Ü–∞", "–º–µ—Å—è—Ü–µ–≤"}
        year_forms  = {"–≥–æ–¥", "–≥–æ–¥–∞", "–ª–µ—Ç"}

        base = datetime.now()
        if unit in day_forms:
            return (base + timedelta(days=n)).date()
        if unit in week_forms:
            return (base + timedelta(weeks=n)).date()
        if unit in month_forms:
            return (base + relativedelta(months=n)).date()
        if unit in year_forms:
            return (base + relativedelta(years=n)).date()

    weekdays_numbers = {
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 0,
        '–≤—Ç–æ—Ä–Ω–∏–∫': 1,
        '—Å—Ä–µ–¥–∞': 2,  '—Å—Ä–µ–¥—É': 2,
        '—á–µ—Ç–≤–µ—Ä–≥': 3,
        '–ø—è—Ç–Ω–∏—Ü–∞': 4, '–ø—è—Ç–Ω–∏—Ü—É': 4,
        '—Å—É–±–±–æ—Ç–∞': 5, '—Å—É–±–±–æ—Ç—É': 5,
        '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 6
    }
    for name, num in weekdays_numbers.items():
        if name in lower_input:
            return get_next_weekday(num).date()

    try:
        parsed = dateparser.parse(
            date_str,
            languages=['ru'],
            settings={
                'PREFER_DATES_FROM': 'future',
                'RELATIVE_BASE': datetime.now(),
                'DATE_ORDER': 'DMY'
            }
        )
        return parsed.date() if parsed else None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_str}': {e}")
        return None

def get_next_weekday(weekday: int):
    today = datetime.now().weekday()
    days_ahead = weekday - today
    if days_ahead <= 0:
        days_ahead += 7
    return datetime.now() + timedelta(days=days_ahead)   

async def handle_task_room(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_input = update.message.text.strip()
    
    if user_id not in user_states:
        return
    
    current_state = user_states[user_id]
        
    if current_state == "ADD_TASK_TITLE":
        context.user_data["title"] = user_input
        user_states[user_id] = "ADD_TASK_DESCRIPTION"
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    
    elif current_state == "ADD_TASK_DESCRIPTION":
        context.user_data['description'] = user_input
        user_states[user_id] = "ADD_TASK_ASSIGNEE"

        reply_keyboard = [["–ú–∏—à–∞", "–ü–∞–ø–∞", "–ú–∞–º–∞", "–ù–∞—Å—Ç—è"]]
        await update.message.reply_text(
            "–≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                one_time_keyboard=True
            )
        )

    elif current_state == "ADD_TASK_ASSIGNEE":
        if user_input not in ["–ú–∏—à–∞", "–ü–∞–ø–∞", "–ú–∞–º–∞", "–ù–∞—Å—Ç—è"]:
            await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞")
            return
        
        context.user_data["assignee"] = user_input
        user_states[user_id] = "ADD_TASK_DUE_DATE"
        await update.message.reply_text(
            "‚è≥ –í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, —á–µ—Ä–µ–∑ 2 –¥–Ω—è, —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –∏ —Ç–¥.\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω –Ω–µ –Ω—É–∂–µ–Ω."
        )
    
    elif current_state == "ADD_TASK_DUE_DATE":
        if user_input.lower() != '–Ω–µ—Ç':
            due_date = await parse_date(user_input) 

            if due_date is None:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É")
                return

            context.user_data["due_date"] = due_date 
            user_states[user_id] = "ADD_TASK_REMINDER_TYPE"

            reply_keyboard = [["–ó–∞ 2 –¥–Ω—è –¥–æ", "–ó–∞ 1 –¥–µ–Ω—å –¥–æ", "–ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", "–í —ç—Ç–æ—Ç –¥–µ–Ω—å –≤ 9:00 —É—Ç—Ä–∞"]]

            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                one_time_keyboard=True
                )
            )

        if user_input.lower() == '–Ω–µ—Ç':
            context.user_data["due_date"] = None
            context.user_data["reminder"] = "–Ω–µ—Ç"
            return await handle_task_creation(update, context) 

    elif current_state == "ADD_TASK_REMINDER_TYPE":
        context.user_data["reminder"] = user_input

        return await handle_task_creation(update, context)

async def handle_task_creation(update, context):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –ë–î"""
    try:
        with psycopg2.connect(**DB_CONFIG) as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    '''INSERT INTO tasks 
                    (title, description, assignee, status, due_date, created_at, category, notified, reminder_type)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, FALSE, %s)
                    RETURNING task_id''',
                    (
                    context.user_data["title"],
                    context.user_data["description"],
                    context.user_data["assignee"],
                    "–ù–æ–≤–∞—è",
                    context.user_data["due_date"],
                    create_datemultirange(datetime.now().date()),
                    "–û–±—â–µ–µ",
                    context.user_data.get("reminder")
                    )
                )
                task_id = cursor.fetchone()[0]
                conn.commit()

        due_date_str = "–Ω–µ—Ç"
        if context.user_data.get("due_date"):
            due_date_str = context.user_data["due_date"].strftime("%d.%m.%Y")
            
        message = (
                f"‚úÖ <b>–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                f"üìå {context.user_data['title']}\n"
                f"üìù {context.user_data['description']}\n"
                f"üë§ {context.user_data['assignee']}\n"
                f"‚è≥ {due_date_str}\n"
                f"üîî {context.user_data.get('reminder', '–Ω–µ—Ç')}"
            )
        
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=get_main_keyboard())

        await notify_assignee(
            bot_token=context.bot.token,
            assignee_name=context.user_data["assignee"],
            task_title=context.user_data["title"],
            task_description=context.user_data["description"],
            due_date=context.user_data["due_date"],
            reminder=context.user_data.get("reminder")
        )

        user_id = update.effective_user.id
        if user_id in user_states:
            del user_states[user_id]
        context.user_data.clear()

    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è",
        reply_markup=get_main_keyboard())
        print(f"–æ—à–∏–±–∫–∞ {e}")
